name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # build:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       python-version: ["3.8", "3.9", "3.10", "3.11"]
  #   steps:
  #   - uses: actions/checkout@v3
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install flake8 pytest
  #       if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
  #   - name: Lint with flake8
  #     run: |
  #       # stop the build if there are Python syntax errors or undefined names
  #       flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  #       # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
  #       flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  #   - name: Test with pytest
  #     run: |
  #       pytest

  release:
    runs-on: ubuntu-latest
    # needs: build

    # env:
    #   TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
    #   TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}

    steps:
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - uses: actions/checkout@v3

    - name: Check Current Version after checkout
      run: |
        poetry version
        
    - name: Check version changes
      id: version_check
      run: |
        current_version=$(poetry version)
        previous_version=$(cat pyproject.toml | grep -Po "version = '(.*?)'")
        if [[ "$current_version" != "$previous_version" ]]; then
          echo "Version changed!"
        fi
        echo $current_version
        echo $previous_version

    - name: Trigger workflow if version changed
      if: steps.version_check.outputs.version_changed == 'true'
      run: echo "Version changed. Triggering workflow."